#pragma once

#include <mutex>

template<typename T>
class Singleton {
public:
    static T& instance() {
        if (!instance_) { 
            std::lock_guard<std::mutex> lock(mutex);
            if (!instance_) { 
                instance_ = new T(); 
            }
        }
        return *instance_;
    }

private:
    Singleton() {}
    Singleton(const Singleton&) = delete;
    Singleton& operator=(const Singleton&) = delete;

    static std::mutex mutex;
    static T* instance_;
};

template<typename T>
std::mutex Singleton<T>::mutex;

template<typename T>
T* Singleton<T>::instance_ = nullptr;


